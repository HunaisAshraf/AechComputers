<%- include("partials/header") %>
<style>
  .error {
    color: #f00;
  }
  #imageDiv img {
    height: 300px;
    width: 330px;
  }
</style>
<section class="content lists col-md-10">
  <div class="box border rounded p-2">
    <div class="border-bottom">
      <h2>Add Product</h2>
    </div>
    <div class="mt-2">
      <div class="w-100 d-flex align-items-center justify-content-center">
        <form class="w-75" enctype="multipart/form-data" id="form">
          <div class="mb-3">
            <label for="name" class="form-label">Product Name</label>
            <input
              type="text"
              class="form-control"
              id="productName"
              name="productName"
            />
          </div>
          <div class="mb-3">
            <label for="price" class="form-label">Price</label>
            <input type="number" class="form-control" id="price" name="price" />
          </div>
          <div class="mb-3">
            <label for="category" class="form-label">Category</label>
            <select class="form-select" name="category" id="category">
              <option value="">Category</option>
              <% categories.forEach(category => { %>
              <option value="<%= category._id %>">
                <%= category.categoryName %>
              </option>
              <% }) %>
            </select>
          </div>
          <div class="mb-3">
            <label for="quantity" class="form-label">Quantity</label>
            <input
              type="number"
              class="form-control"
              id="quantity"
              name="quantity"
            />
            <p class="text-danger" id="errMsg"></p>
          </div>
          <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <input
              type="text"
              class="form-control"
              id="description"
              name="description"
              required
            />
          </div>
          <div class="mb-3">
            <div id="imageDiv" class="d-flex flex-wrap gap-5"></div>
            <div>
              <label for="image" class="form-label">Image</label>
              <input
                type="file"
                class="form-control"
                id="image"
                name="images"
                accept="image/*"
                multiple
                onchange="loadFile(event)"
                required
              />
            </div>
          </div>
          <div class="text-center">
            <!-- <button type="submit" class="btn btn-dark">Add Product</button> -->
            <button type="button" id="cropButton" class="btn btn-dark">
              crop
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    let crop = [];
    function loadFile(event) {
      let imageDiv = document.getElementById("imageDiv");
      imageDiv.innerHTML = "";

      const maxImages = 4;
      const files = event.target.files;
      if (files.length > maxImages) {
        alert(`Please select only up to ${maxImages} images.`);
        document.getElementById("image").value = ""; // Clear the file input
        return;
      }

      for (let i = 0; i < files.length; i++) {
        const file = files[i];

        const reader = new FileReader();

        reader.onload = (e) => {
          // Create an image element and set its source to the selected file
          const div = document.createElement("div");
          div.style.height = "300px";
          div.style.width = "300px";
          const img = new Image();
          img.src = e.target.result;
          img.style.margin = "30px";

          // Append the image to the container
          div.appendChild(img);
          imageDiv.appendChild(div);

          // Initialize Cropper.js on the image
          const cropper = new Cropper(img, {
            aspectRatio: 4 / 3, // Set the aspect ratio as needed
            viewMode: 1, // Set the view mode as needed
          });

          // Store the cropper instance in the croppers array
          crop.push(cropper);
        };

        reader.readAsDataURL(file);
      }
      document.getElementById("cropButton").addEventListener(
        "click",
        function () {
          console.log("clicked");
          let croppedImage = [];
          let productName = document.getElementById("productName").value;
          let price = document.getElementById("price").value;
          let category = document.getElementById("category").value;
          let quantity = document.getElementById("quantity").value;
          let description = document.getElementById("description").value;

          let promises = [];

          const formData = new FormData();
          formData.append("productName", productName);
          formData.append("price", price);
          formData.append("category", category);
          formData.append("quantity", quantity);
          formData.append("description", description);

          for (let i = 0; i < crop.length; i++) {
            const canvas = crop[i].getCroppedCanvas();

            let promise = new Promise((resolve) => {
              canvas.toBlob(function (blob) {
                const file = new File([blob], i + "croppedImg.png", {
                  type: "image/png",
                });
                formData.append(`image${i}`, file);
                resolve();
              });
            });

            promises.push(promise);
          }

          // Wait for all promises to resolve before making the fetch call
          Promise.all(promises).then(() => {
            fetch("/add-product", {
              method: "POST",
              body: formData,
            })
              .then((response) => response.json())
              .then((data) => {
                console.log(data.success);

                if (data.success) {
                  Swal.fire({
                    title: "Added!!",
                    text: "Product Added succesfully",
                    icon: "success",
                    confirmButtonText: "OK",
                  }).then((result) => {
                    window.location.href = "/product-list";
                  });
                } else {
                  Swal.fire({
                    title: "Failed!!",
                    text: "Failed to add category",
                    icon: "error",
                    confirmButtonText: "OK",
                  }).then((result) => {
                    window.location.href = "/category-list";
                  });
                }
              })
              .catch((error) => {
                console.error("Error:", error);
              });
          });
        },
        "image/png"
      );
    }

    $(document).ready(function () {
      $("#form").validate({
        rules: {
          productName: {
            required: true,
            pattern: /^[a-zA-Z]/,
          },
          price: {
            required: true,
            minlength: 1,
          },
          quantity: {
            required: true,
            minlength: 1,
          },
          description: {
            required: true,
            pattern: /^[a-zA-Z]/,
          },
          category: {
            required: true,
          },
          images: {
            required: true,
            // maxlength: 4,
          },
        },
      });
    });
  </script>
</section>

<%- include("partials/footer") %>

